# -*- coding: utf-8 -*-
"""reto9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10meyDOty71TYUqECw9e9bGDclTcxwRHu

1.Desarrollar un algoritmo que calcule el promedio de un arreglo de reales.
"""

def calcular_arreglo(arreglo):
  if len(arreglo) == 0: # es el condicional que nos indica el caso en el cual el arreglo esta vacio
    return "el arreglo esta vacio" # su impresion correspondiente en caso tal de que no haya nada en el arreglo
  sumatoria_reales = sum(arreglo) #se establece el valor correspondiente a la sumatoria de todos los tados del arreglo
  promedio_reales = sumatoria_reales / len(arreglo) # se establece que la sumatoria de los elementos del arreglo se divida entre el numero de elementos (es la formula de promedio de toda la vida jeje)
  return promedio_reales # nos regresa el valor del promedio
reales = [] # lista vacia de inicio
n = int(input("ingrese la cantidad de numeros que tendrá su arreglo: ")) # se da el ingreso a la cantidad de datos que tendra el arreglo
for i in range(n): # se establece un rango el cual sera utilizado para que se ingrese cada uno de los elementos del arreglo
  num = float(input("Ingrese el elemento " + str(i + 1) + ": ")) # impresion que indica el elemento que debera ingresar
  reales.append(num) # se agregan los datos a la lista vacia anteriormente establecida
resultado = calcular_arreglo(reales) # se hace la entrega del resultado de la funcion
print("el promedio de el arreglo de numeros reales es " + str(resultado)) # se hace el print final con el resultado

"""2. Desarrollar un algoritmo que calcule el producto punto de dos arreglos de números enteros (reales) de igual tamaño."""

def calcular_producto(ar1, ar2):
    if len(ar1) == 0:  # Verifica si las listas están vacías
        return "El arreglo esta vacio."
    if len(ar1) != len(ar2):  # por medio de este condicional se verifica que los dos arreglos tengan el mismo tamaño
        return "Los arreglos no son del mismo tamaño."

    producto = 0 # se inicia desde 0
    for i in range(len(ar1)): # recorre los elementos del arreglo
      producto += ar1[i] * ar2[i] # los numeros se van sumando con forme se convierten en producto
    return producto # nos entrega el resultado anetrior

if __name__ == "__main__":
    n = int(input("ingrese el tamaño de elementos en los arreglos: ")) # ingresamos el numero de elementos que contendra nuestro arreglo
    if n <= 0:
      print("el tamaño del arreglo debe ser mayor a 0") # caso en el que digamos que el arreglo va a tener 0 elementos o menos
    else:
     # Definimos las listas vacías
      arreglo1 = []
      arreglo2 = []

      # Ingresamos los elementos del primer arreglo
      print("Ingrese los elementos del primer arreglo:")
      for i in range(n): # recorremos cada elemento de la lista, esto se hace con el fin de darle un valor a cada elemento
        arreglo1.append(float(input("Elemento " + str(i+1)+ " "))) # print que le asignara un valor a cada elemento de el arreglo

      # ingresamos los elementos del segundo arreglo (se repite lo mismo que antes pero con el arreglo 2)
      print("Ingrese los elementos del segundo arreglo:")
      for i in range(n):
        arreglo2.append(float(input("Elemento " + str(i+1) + " ")))

      resultado = calcular_producto(arreglo1, arreglo2) # calculamos el resultado de toda la funcion
      print("El producto punto es:" + str(resultado)) # es el print final que nos retorna el resultado del arreglo

"""Hacer un algoritmo que deje al final de un arreglo de números todos los ceros que aparezcan en dicho arreglo."""

def mover_ceros_al_final(arreglo):
    no_ceros = []  # en esta lista almacenaremos todos los numeros que no sean 0
    cant_ceros = 0  # con esto contaaremos los ceros
    for num in arreglo: # con el bucle for recorremos cada elemento del arreglo
        if num == 0: # verifica que el numero sea igual a 0
            cant_ceros += 1 # si es cero aumenta una unidad el contador de 0
        else:
            no_ceros.append(num) # si no es cero el elemento se envia a la lista sin_ceros
    return no_ceros + [0] * cant_ceros # aqui agregamos los ceros al final del arreglo

if __name__ == "__main__":
    n = int(input("ingrese el tamaño del arreglo: ")) # el usuario determina el numero de datos en el arreglo
    if n <= 0:
      print("el arreglo no puede tener 0 elementos...") # es el caso en el cual el ususario dice que su arrreglo tendra 0 datos o datos negativos, algo que no es posible
    else:
      arreglo = []  # establecmos una lista vacacia
      for i in range(n):# recorremos la cantidad de elementos que dijo el usuario, con el fin de asignarle un valor a cada uno
        valor = int(input(f"Elemento " + str(i+1) + " ")) # se le asigna un valor (numerico a cada elemento del arreglo)
        arreglo.append(valor) # se agrega dicho elemento a la lista arreglo
      resultado = mover_ceros_al_final(arreglo) # calcula el resultado de la funcion
      print("lista con ceros al final: " + str(resultado)) # imprimimos dicho resultado